// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                   Int      @id @default(autoincrement())
  nome                 String
  cpf                  String   @unique
  email                String   @unique
  senha                String
  datacadastro         DateTime @default(now())
  valorOrcamentoMensal Float?
  imageUrl             String?
  openModal            Int?
  dataExpiracao        DateTime
  statusFinanceiro     Int?     @default(1) // em dia 1 ou vencido 0

  UsuarioPagamento UsuarioPagamento[]
}

model UsuarioPagamento {
  id              Int       @id @default(autoincrement())
  idUser          Int
  valorPago       Float?
  metodoPagamento String    @default("pix")
  dataPagamento   DateTime?
  dataExpiracao   DateTime
  status          Int?      @default(1) //1 pago  ou 0 não pago
  Usuario         Usuario   @relation(fields: [idUser], references: [id])
}

model Banco {
  id        Int    @id @default(autoincrement())
  nomeBanco String
  idUser    Int
}

model Categoria {
  id            Int        @id @default(autoincrement())
  nomeCategoria String
  idUser        Int
  despesas      Despesas[] // Relação com Despesas
}

model Contas {
  id                Int    @id @default(autoincrement())
  idUser            Int
  estabelecimento   String
  comprador         String
  pagador           String
  valor             Float
  dataVencimento    String
  qtdParcelas       Int?
  pago              Int?   @default(0)
  mesCorrespondente String
}

model DespesaDeBens {
  id                   Int     @id @default(autoincrement())
  idPatrimonio         Int
  observacao           String?
  kmAntigo             Int?
  kmAtual              Int?
  valor                Float
  responsavel          String?
  dataAquisicao        String
  compradorPagador     String?
  idUser               Int
  observacaoInativacao String?
  inativo              Int     @default(0)
  tipoDespesaId        Int

  TipoDespesa TipoDespesa @relation(fields: [tipoDespesaId], references: [id])
  Patrimonio  Patrimonio  @relation(fields: [idPatrimonio], references: [id])
}

model Despesas {
  id                 Int             @id @default(autoincrement())
  idUser             Int
  dataGasto          DateTime        @default(now())
  local              String?
  formaDePagamentoId Int
  valorGasto         Float
  responsavel        String
  categoriaId        Int
  pagante            String
  fechada            Int             @default(0)
  observacao         String?
  mesCorrespondente  String
  dataAquisicao      String
  categoria          Categoria       @relation(fields: [categoriaId], references: [id])
  FormaPagamento     FormaPagamento? @relation(fields: [formaDePagamentoId], references: [id])
}

model Dividendo {
  id                 Int      @id @default(autoincrement())
  dataInserido       DateTime @default(now()) @map("datainserido")
  valorDividendo     Float
  idInvestimento     Int
  nomeInvestimento   String
  idUser             Int
  idNomeInvestimento Int
}

model FormaPagamento {
  id                 Int    @id @default(autoincrement())
  nomeFormaPagamento String
  idUser             Int

  despesas Despesas[]
}

model Nomeacao {
  id       Int    @id @default(autoincrement())
  nomeAcao String @unique
  idUser   Int
}

model NomeFundoImobiliario {
  id        Int    @id @default(autoincrement())
  nomeFundo String
  idUser    Int
}

model Investimento {
  id              Int     @id @default(autoincrement())
  idUser          Int
  tipo            String // campo para discriminar o tipo de investimento (ex: "acao", "fii", "rendaFixa", etc.)
  nome            String // Nome genérico para qualquer tipo de investimento
  quantidade      Float? // Quantidade de ações, cotas, ou criptomoedas
  valorPago       Float? // Quantidade de ações, cotas, ou criptomoedas
  tipoTitulo      String? // Tipo de título (para renda fixa e debêntures)
  valorInvestido  Float // Valor investido
  taxaJuros       Float? // Taxa de juros (para renda fixa, debêntures, etc.)
  dataCompra      String // Data de compra
  valorAtualFii   Float? // Valor atual do FII
  dataVencimento  String? // Data de vencimento (para títulos de renda fixa e debêntures)
  ticker          String? // Ticker de ação ou FII
  instituicao     String? // Instituição financeira (para renda fixa, previdência, etc.)
  tipoPlano       String? // Tipo de plano (para previdência privada: PGBL, VGBL)
  tipoFundo       String? // Tipo de fundo (para fundos de investimento)
  previsaoDeGanho Float? // Previsão de ganho (para fundos de investimento)
}

model FechamentoInvestimento {
  id               Int      @id @default(autoincrement())
  nomeInvestimento String?
  tipoInvestimento String?
  idInvestimento   Int // Referência ao investimento encerrado
  idUser           Int // Referência ao usuário
  valorInvestido   Float? // Valor investido originalmente
  valorResgatado   Float? // Valor resgatado ao final
  dataFechamento   String? // Data de fechamento ou vencimento do investimento
  retornoObtido    Float? // Retorno obtido (calculado: valorResgatado - valorInvestido)
  tipoFechamento   String? // Tipo de fechamento (ex: "vencimento", "venda antecipada", etc.)
  observacao       String? // Observações adicionais (motivo da venda, detalhes sobre o resgate)
  dataSaque        DateTime @default(now()) // Data de criação do registro
  quantidadeCotas  Int?
  precoCota        Float?
}

model GanhosInvestimentos {
  id                 Int     @id @default(autoincrement())
  nomeInvestimento   String?
  dataDoRendimento   String?
  valor              Float?
  idUser             Int?
  tipoDeInvestimento String?
}

model Patrimonio {
  id              Int             @id @default(autoincrement())
  nomePatrimonio  String
  tipoPatrimonio  String
  valorPatrimonio Float
  dataAquisicao   String
  idUser          Int
  localizacao     String?
  observacao      String?
  documentoPath   String?
  DespesaDeBens   DespesaDeBens[]
}

model Proventos {
  id                 Int      @id @default(autoincrement())
  datainserido       DateTime @default(now()) @map("datainserido")
  valorprovento      Float
  idinvestimento     Int
  nomeinvestimento   String
  iduser             Int
  idnomeinvestimento Int
}

model TipoDespesa {
  id          Int    @id @default(autoincrement())
  nomeDespesa String
  idUser      Int

  despesadebens DespesaDeBens[]
}

model ValorAtual {
  id             Int      @id @default(autoincrement())
  idInvestimento Int
  valor          Decimal
  data           DateTime @default(now())
}
